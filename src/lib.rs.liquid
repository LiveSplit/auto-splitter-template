{% if toolchain == "nightly" %}#![feature(type_alias_impl_trait, const_async_blocks)]
{% endif %}{% unless std_layer == "std" %}#![no_std]
{% endunless %}{% if std_layer == "alloc" %}extern crate alloc;

#[global_allocator]
static ALLOC: dlmalloc::GlobalDlmalloc = dlmalloc::GlobalDlmalloc;
{% endif %}{% if toolchain == "nightly" or std_layer == "core" or std_layer == "alloc" %}
{% endif %}use asr::{future::next_tick{% if platform == "unity" %}, game_engine::unity::il2cpp::{Module, Version}{% endif %}{% if has_settings %}, settings::Gui{% endif %}, Process};

asr::async_main!({{toolchain}});{% unless std_layer == "std" %}
asr::panic_handler!();{% endunless %}{% if has_settings %}

#[derive(Gui)]
struct Settings {
    /// My Setting
    #[default = true]
    my_setting: bool,
    // TODO: Change these settings.
}{% endif %}

async fn main() {
    // TODO: Set up some general state and settings.{% if has_settings %}
    let mut settings = Settings::register();{% endif %}

    asr::print_message("Hello, World!");

    loop {
        let process = Process::wait_attach("{{ process_name }}").await;
        process
            .until_closes(async {
                {% if platform == "unity" %}// TODO: Change this to use the correct version of IL2CPP (or mono backend).
                let module = Module::wait_attach(&process, Version::V2020).await;
                let image = module.wait_get_default_image(&process).await;

                {% endif %}// TODO: Load some initial information from the process.
                loop {
                    {% if has_settings %}settings.update();

                    {% endif %}// TODO: Do something on every tick.
                    next_tick().await;
                }
            })
            .await;
    }
}
